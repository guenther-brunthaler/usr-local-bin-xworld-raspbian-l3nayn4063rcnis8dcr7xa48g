#! /bin/sh
exit_version() {
	wr . <<- EOF; exit
	$APP Version 2019.60
	Copyright (c) 2017-2019 Guenther Brunthaler. All rights reserved.

	This script is free software.
	Distribution is permitted under the terms of the GPLv3.
	EOF
}
APP=${0##*/}

exit_help() {
	wr <<- EOF; exit_version
	$APP - wrapper script for omxplayer

	$APP adds aspect ratio border calculation and optional
	multifile-playback support. Also displays the name of the last file
	viewed, which helps choosing the next file when watching multiple
	episodes of a show. The script also shows the expanded basename,
	providing more information if shell wildcard arguments such as
	*S01E04* are used.

	Usage: $APP [ <options> ] [ <volspec> ] [ <media_file_1> ...]

	where

	<media_file_1> the first of potentially multile multimedia files for
	playback.

	<volspec> is an optional volume playback specification in the format
	+NNNN or -NNNN where N is a decimal digit.

	If more than one media file is specified, the -m option is required.
	This is a safeguard against shell wildcards intended to match a single
	file actually matching multiple files.

	Supported options:

	-m, --multifile, --multi-file, --multiple-files: Allow multiple media
	files to be specified as arguments, which will be played back in
	order. Without this option, only a single media file is allowed as an
	argument.

	-D <delay>: The number of seconds to pause between playing back the
	individual files during multiple-file playback.

	-d, --deinterlace, --nodeinterlace, --advanced, --nativedeinterlace,
	-i, --info, -s, --stats, -w, --hw, --loop: Options without arguments
	which will be passed through directly to omxplayer.

	--sid, --aidx, --amp, --orientation, --fps, --win, --crop,
	--aspect-mode, --layout, --key-config, --dbus_name, --alpha, --layer,
	--display, --lavfdopts: Options taking a single argument which will be
	passed through directly to omxplayer.

	-l <hh:mm:ss>: Time stamp into the media file where the playback of
	every file should start.

	--pos <hh:mm:ss>: Time stamp into the first file of a multi-file
	sequence where playback should start. The remaining files, if any,
	will be played back from the beginning.

	--ar <x>/<y>, --aspect-ratio <x>/<y>: Override the aspect ration for
	playback, e. g. "--ar 16/9" or "--ar 4/3".

	-r, --repeat, --loop: Repeat the whole multimedia playback sequence
	infinitely.

	-n, --dry-run: Show which backend commands would be executed, but
	don't actually execute them.

	-t, --toggle, --toggle-fullscreen: Toggle the current terminal windows
	between its normal size and full-screen. Useful if the script crashes
	and failed to restore the original window size as a side effect.

	--help, -h: Display this help text.

	--version: Display version information.

	EOF
}

set -e

# Wrap stdin or arguments to $LINEWIDTH characters.
# If $1 is ".", wrap only but do not fill paragraphs.
wr() {
	local S
	S=
	if test "$1" = .
	then
		S=-s; shift
	fi
	if test $# -gt 0
	then
		printf '%s\n' "$*" | wr
	else
		fmt $S -w $LINEWIDTH
	fi
}
MAXWIDTH=100; test -t 1 && LINEWIDTH=`tput cols` || LINEWIDTH=
test ${LINEWIDTH:=72} -gt $MAXWIDTH && LINEWIDTH=$MAXWIDTH; unset MAXWIDTH

fstoggle() {
	wmctrl -r :ACTIVE: -b toggle,fullscreen
}

cleanup() {
	rc=$?
	$toggled && fstoggle
	test $rc = 0 || echo "\"$0\" failed!" >& 2
}
toggled=false
trap cleanup 0

ok=true
cmd=`
       {
	       cmd=omxplayer
	       which $cmd \
		       || echo "The (actual) $cmd is not installed!" >& 2
       } | head -n 1
`
test -n "$cmd"; test -f "$cmd"; test -x "$cmd"
dry_run=false
single_file=true
pthropt=
aspect_x=
delay=3
initpos=
repeat=1
while :
do
	case $1 in
		-h | --help) exit_help;;
		-V | --version) exit_version;;
		-m | --multifile | --multi-file | --multiple-files)
			single_file=false;;
		-D) delay=$2; shift;;
		-d | --deinterlace \
		| --nodeinterlace | --advanced \
		| --nativedeinterlace \
		| -i | --info | -s | --stats | -w | --hw \
		| --loop )
			pthropt="$pthropt $1"
			;;
		--sid | --aidx | -l | --amp |  --orientation | --fps \
		| --win | --crop | --aspect-mode | --layout | --key-config \
		| --dbus_name | --alpha | --layer | --display | --lavfdopts)
			pthropt="$pthropt $1 $2"; shift
			;;
		--pos) initpos=" $1 $2"; shift;;
		--ar | --aspect-ratio)
			aspect_x=${2%%/*}; aspect_y=${2##*/}
			test x"$aspect_x/$aspect_y" = x"$2"
			shift
			;;
		-r | --repeat | --loop) repeat=2;;
		-n | --dry-run) dry_run=true;;
		-t | --toggle | --toggle-fullscreen) fstoggle; exit;;
		--) shift; break;;
		*) break
	esac
	shift
done
test -t 0; test -t 1; test -t 2
if test -n "$aspect_x"
then
	if mediainfo=`which mediainfo` && xwininfo=`which xwininfo`
	then
		# For now, I don't care about detecting the actual screen
		# dimensions and just hard-code them here.
 		wdim=`"$xwininfo" -root | awk '
 			$1 ~ /Width:/ {w= $2}
 			$1 ~ /Height:/ {h= $2}
 			END {print w "/" h}
 		'`
		screen_w=${wdim%%/*}; screen_h=${wdim##*/}
		test x"$screen_w/$screen_h" = x"$wdim"
	else
		echo "'mediainfo' utility or 'xwininfo' utility (often part of"
		echo "a package 'x11-utils') is not installed."
		echo "Ignoring --aspect-ratio option."
		unset aspect_x
	fi >& 2
fi
if
	test $# -gt 1 \
	&& expr x"$1" : x'[-+][[:digit:]]\{4\}$' > /dev/null
then
	vol=$1; shift
else
	vol=
fi
play() {
	local mw mh o c
	if test ! -f "$movie"
	then
		echo "*** NOT FOUND: File \"$movie\"." >& 2
		ok=false
		return
	fi
	set "$cmd" -b$pthropt$initpos
	if test -n "$aspect_x"
	then
		# Get movie pixel sizes.
		o=`"$mediainfo" --Inform="Video;%Width%/%Height%" "$movie"`
		mw=${o%%/*}; mh=${o##*/}; test x"$mw/$mh" = x"$o"
		# Adapt to requested aspect ratio.
		mh=`expr $mh '*' $aspect_y / $aspect_x`
		# Scale to full display width.
		o=`expr $screen_w '*' $mh / $mw`
		if test $o -le $screen_h
		then
			c=`expr '(' $screen_h - $o ')' / 2 || :`
			c=0,$c,`expr $screen_w - 1`,`expr $c + $o - 1`
		else
			# Too high - scale to full display height instead.
			o=`expr $screen_h '*' $mw / $mh`
			c=`expr '(' $screen_w - $o ')' / 2 || :`
			c=$c,0,`expr $c + $o - 1`,`expr $screen_h - 1`
		fi
		set "$@" --win "$c"
	fi
	$dry_run && set echo SIMULATION: "$@"
	test -n "$vol" && set -- "$@" --vol "$vol"
	set -- "$@" "$movie"
	local mt='\(.*[^[:space:]]\)[[:space:]]\+(.*)[.][^.]*$'
	mt=`expr x"$movie" : x"$mt"` || mt=${movie%.*}
	printf 'Now playing: \033[32m%s\033[0m\n' "$mt" >& 2
	sleep "$delay"
	"$@" && c=0 || c=$?
	printf 'Last file played was: \033[32m%s\033[0m\n' "$mt" >& 2
	if test 3 = $c
	then
		repeat=0
		return
	fi
	test $c -le 1 && return
	echo "Command failed:" "$@" >& 2
	false || exit
}
if test $# -gt 1 && $single_file
then
	echo "More than one file has been specified:"
	echo
	n=7; n=`expr $n + 1`
	for movie
	do
		n=`expr $n - 1` || break
		printf "'%s'\n" "$movie"
	done
	test $n = 0 && echo ...
	echo
	echo "but multi-file mode -m has not been specified!"
	echo "Aborting!"
	exit
fi >& 2
$dry_run || { fstoggle; toggled=true; }
while :
do
	for movie
	do
		play
		initpos=
		test 0 = $repeat && break
	done
	test 2 = $repeat && continue
	break
done
$ok || exit
